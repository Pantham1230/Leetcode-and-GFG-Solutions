class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        graph={}
        for i in range(numCourses):
            graph[i]=[]

        for a, b in prerequisites:
            graph[b].append(a)

        visited=[0]*numCourses

        def dfs(course):
            if visited[course]==1:
                return False
            if visited[course]==2:
                return True
            visited[course]=1
            for neighbor in graph[course]:
                if not dfs(neighbor):
                    return False
            visited[course]=2
            return True
        for i in range(numCourses):
            if not dfs(i):
                return False
        return True
