from collections import deque
class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        graph={}
        for i in range(numCourses):
            graph[i]=[]
        indegree=[0]*numCourses
        for a,b in prerequisites:
            graph[b].append(a)
            indegree[a]+=1
        queue=deque()
        for i in range(numCourses):
            if indegree[i]==0:
                queue.append(i)

        order=[]

        while queue:
            course=queue.popleft()
            order.append(course)

            for neighbor in graph[course]:
                indegree[neighbor]-=1
                if indegree[neighbor]==0:
                    queue.append(neighbor)

        if len(order)==numCourses:
            return order
        else:
            return []
